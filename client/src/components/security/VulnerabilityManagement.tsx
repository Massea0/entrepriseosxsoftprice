// üöÄ PHASE 5 - GESTION DES VULN√âRABILIT√âS
import React, { useState, useEffect } from "react";
import { Card, CardHeader, CardContent, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  Bug, 
  Scan, 
  Calendar,
  ExternalLink,
  Download,
  RefreshCw
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useSecurityMonitoring } from "@/utils/security-audit";

interface Vulnerability {
  id: string;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  cvss: number;
  description: string;
  affected_component: string;
  discovered_date: string;
  status: 'open' | 'in_progress' | 'resolved' | 'false_positive';
  remediation: string;
  references: string[];
  patch_available: boolean;
  exploitability: 'high' | 'medium' | 'low';
}

export function VulnerabilityManagement() {
  const { toast } = useToast();
  const { logEvent } = useSecurityMonitoring();
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [isScanning, setIsScanning] = useState(false);
  const [selectedVuln, setSelectedVuln] = useState<Vulnerability | null>(null);
  const [scanProgress, setScanProgress] = useState(0);

  // Simuler des vuln√©rabilit√©s existantes
  useEffect(() => {
    const mockVulnerabilities: Vulnerability[] = [
      {
        id: 'CVE-2024-0001',
        title: 'Cross-Site Scripting (XSS) dans les commentaires',
        severity: 'high',
        cvss: 7.5,
        description: 'Vuln√©rabilit√© XSS r√©fl√©chie permettant l\'ex√©cution de scripts arbitraires',
        affected_component: 'Comments Module',
        discovered_date: '2024-01-08',
        status: 'open',
        remediation: 'Impl√©menter une validation et un √©chappement appropri√©s des entr√©es utilisateur',
        references: ['https://owasp.org/www-community/attacks/xss/', 'CVE-2024-0001'],
        patch_available: true,
        exploitability: 'high'
      },
      {
        id: 'CVE-2024-0002',
        title: 'Injection SQL dans la recherche utilisateur',
        severity: 'critical',
        cvss: 9.8,
        description: 'Vuln√©rabilit√© d\'injection SQL permettant l\'acc√®s non autoris√© √† la base de donn√©es',
        affected_component: 'User Search API',
        discovered_date: '2024-01-07',
        status: 'in_progress',
        remediation: 'Utiliser des requ√™tes pr√©par√©es et une validation stricte des param√®tres',
        references: ['https://owasp.org/www-community/attacks/SQL_Injection', 'CVE-2024-0002'],
        patch_available: true,
        exploitability: 'high'
      },
      {
        id: 'CVE-2024-0003',
        title: 'Exposition d\'informations sensibles dans les logs',
        severity: 'medium',
        cvss: 5.3,
        description: 'Les mots de passe et tokens sont expos√©s dans les fichiers de log',
        affected_component: 'Logging System',
        discovered_date: '2024-01-06',
        status: 'resolved',
        remediation: 'Masquer les donn√©es sensibles dans les logs et impl√©menter une rotation des logs',
        references: ['https://owasp.org/www-community/vulnerabilities/Information_exposure'],
        patch_available: false,
        exploitability: 'low'
      }
    ];
    
    setVulnerabilities(mockVulnerabilities);
  }, []);

  const startSecurityScan = async () => {
    setIsScanning(true);
    setScanProgress(0);
    
    logEvent({
      type: 'suspicious_activity',
      severity: 'medium',
      description: 'Security vulnerability scan initiated',
      metadata: { scan_type: 'comprehensive' }
    });

    // Simuler un scan progressif
    const intervals = [
      { progress: 20, message: 'Analyse des d√©pendances...' },
      { progress: 40, message: 'Scan des ports r√©seau...' },
      { progress: 60, message: 'Audit du code source...' },
      { progress: 80, message: 'Test des configurations...' },
      { progress: 100, message: 'G√©n√©ration du rapport...' }
    ];

    for (const interval of intervals) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      setScanProgress(interval.progress);
      
      toast({
        title: "Scan en cours",
        description: interval.message
      });
    }

    // Simuler la d√©couverte d'une nouvelle vuln√©rabilit√©
    const newVuln: Vulnerability = {
      id: 'CVE-2024-0004',
      title: 'Composant React obsol√®te avec faille de s√©curit√©',
      severity: 'medium',
      cvss: 6.1,
      description: 'Version obsol√®te de React avec vuln√©rabilit√© connue',
      affected_component: 'Frontend Dependencies',
      discovered_date: new Date().toISOString().split('T')[0],
      status: 'open',
      remediation: 'Mettre √† jour React vers la derni√®re version stable',
      references: ['https://reactjs.org/blog/2024/01/08/security-update.html'],
      patch_available: true,
      exploitability: 'medium'
    };

    setVulnerabilities(prev => [newVuln, ...prev]);
    setIsScanning(false);
    setScanProgress(0);

    toast({
      title: "Scan termin√©",
      description: "1 nouvelle vuln√©rabilit√© d√©tect√©e",
      variant: "destructive"
    });
  };

  const updateVulnerabilityStatus = (id: string, status: Vulnerability['status']) => {
    setVulnerabilities(prev => 
      prev.map(vuln => 
        vuln.id === id ? { ...vuln, status } : vuln
      )
    );

    toast({
      title: "Statut mis √† jour",
      description: `Vuln√©rabilit√© ${id} marqu√©e comme ${status}`
    });
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'destructive';
      case 'high': return 'destructive';
      case 'medium': return 'secondary';
      case 'low': return 'outline';
      default: return 'outline';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'destructive';
      case 'in_progress': return 'secondary';
      case 'resolved': return 'default';
      case 'false_positive': return 'outline';
      default: return 'outline';
    }
  };

  const criticalCount = vulnerabilities.filter(v => v.severity === 'critical').length;
  const highCount = vulnerabilities.filter(v => v.severity === 'high').length;
  const openCount = vulnerabilities.filter(v => v.status === 'open').length;

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold flex items-center space-x-2">
          <Bug className="h-6 w-6" />
          <span>Gestion des Vuln√©rabilit√©s</span>
        </h2>
        <p className="text-muted-foreground mt-2">
          Surveillance, √©valuation et correction des vuln√©rabilit√©s de s√©curit√©
        </p>
      </div>

      {/* M√©triques globales */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Vuln√©rabilit√©s Critiques</CardTitle>
            <AlertTriangle className="h-4 w-4 text-destructive" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-destructive">{criticalCount}</div>
            <p className="text-xs text-muted-foreground">N√©cessitent action imm√©diate</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Vuln√©rabilit√©s √âlev√©es</CardTitle>
            <AlertTriangle className="h-4 w-4 text-orange-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-500">{highCount}</div>
            <p className="text-xs text-muted-foreground">Correction prioritaire</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Vuln√©rabilit√©s Ouvertes</CardTitle>
            <Bug className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{openCount}</div>
            <p className="text-xs text-muted-foreground">Non trait√©es</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Dernier Scan</CardTitle>
            <Calendar className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">Aujourd'hui</div>
            <p className="text-xs text-muted-foreground">Scan automatique quotidien</p>
          </CardContent>
        </Card>
      </div>

      {/* Actions rapides */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>Actions de S√©curit√©</span>
            <Button onClick={startSecurityScan} disabled={isScanning}>
              {isScanning ? (
                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
              ) : (
                <Scan className="h-4 w-4 mr-2" />
              )}
              {isScanning ? 'Scan en cours...' : 'Lancer Scan S√©curit√©'}
            </Button>
          </CardTitle>
        </CardHeader>
        {isScanning && (
          <CardContent>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Progression du scan</span>
                <span>{scanProgress}%</span>
              </div>
              <Progress value={scanProgress} className="w-full" />
            </div>
          </CardContent>
        )}
      </Card>

      <Tabs defaultValue="list" className="space-y-4">
        <TabsList>
          <TabsTrigger value="list">Liste des Vuln√©rabilit√©s</TabsTrigger>
          <TabsTrigger value="details">D√©tails</TabsTrigger>
          <TabsTrigger value="reports">Rapports</TabsTrigger>
        </TabsList>

        <TabsContent value="list" className="space-y-4">
          <div className="space-y-3">
            {vulnerabilities.map((vuln) => (
              <Card key={vuln.id} className="cursor-pointer hover:shadow-md transition-shadow">
                <CardContent className="pt-4">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        <Badge variant={getSeverityColor(vuln.severity) as unknown}>
                          {vuln.severity.toUpperCase()}
                        </Badge>
                        <Badge variant={getStatusColor(vuln.status) as unknown}>
                          {vuln.status.replace('_', ' ').toUpperCase()}
                        </Badge>
                        <Badge variant="outline">CVSS: {vuln.cvss}</Badge>
                        {vuln.patch_available && (
                          <Badge variant="default">Patch Disponible</Badge>
                        )}
                      </div>
                      <h3 className="font-semibold text-lg mb-1">{vuln.title}</h3>
                      <p className="text-sm text-muted-foreground mb-2">{vuln.description}</p>
                      <div className="flex items-center space-x-4 text-xs text-muted-foreground">
                        <span>ID: {vuln.id}</span>
                        <span>Composant: {vuln.affected_component}</span>
                        <span>D√©couvert: {vuln.discovered_date}</span>
                      </div>
                    </div>
                    <div className="flex flex-col space-y-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => setSelectedVuln(vuln)}
                      >
                        D√©tails
                      </Button>
                      {vuln.status === 'open' && (
                        <Button
                          size="sm"
                          onClick={() => updateVulnerabilityStatus(vuln.id, 'in_progress')}
                        >
                          Traiter
                        </Button>
                      )}
                      {vuln.status === 'in_progress' && (
                        <Button
                          size="sm"
                          variant="default"
                          onClick={() => updateVulnerabilityStatus(vuln.id, 'resolved')}
                        >
                          R√©soudre
                        </Button>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="details" className="space-y-4">
          {selectedVuln ? (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Bug className="h-5 w-5" />
                  <span>{selectedVuln.title}</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label>S√©v√©rit√©</Label>
                    <Badge variant={getSeverityColor(selectedVuln.severity) as unknown} className="ml-2">
                      {selectedVuln.severity.toUpperCase()}
                    </Badge>
                  </div>
                  <div>
                    <Label>Score CVSS</Label>
                    <p className="font-semibold">{selectedVuln.cvss}/10</p>
                  </div>
                  <div>
                    <Label>Exploitabilit√©</Label>
                    <p className="capitalize">{selectedVuln.exploitability}</p>
                  </div>
                  <div>
                    <Label>Patch Disponible</Label>
                    <p>{selectedVuln.patch_available ? 'Oui' : 'Non'}</p>
                  </div>
                </div>

                <div>
                  <Label>Description</Label>
                  <p className="text-sm mt-1">{selectedVuln.description}</p>
                </div>

                <div>
                  <Label>Rem√©diation</Label>
                  <p className="text-sm mt-1">{selectedVuln.remediation}</p>
                </div>

                <div>
                  <Label>R√©f√©rences</Label>
                  <div className="space-y-1 mt-1">
                    {selectedVuln.references.map((ref, index) => (
                      <div key={index} className="flex items-center space-x-2">
                        <ExternalLink className="h-4 w-4" />
                        <a href={ref} target="_blank" rel="noopener noreferrer" className="text-primary hover:underline text-sm">
                          {ref}
                        </a>
                      </div>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          ) : (
            <Card>
              <CardContent className="pt-6">
                <div className="text-center py-8">
                  <Bug className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">Aucune vuln√©rabilit√© s√©lectionn√©e</h3>
                  <p className="text-muted-foreground">
                    S√©lectionnez une vuln√©rabilit√© dans la liste pour voir les d√©tails
                  </p>
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="reports" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Rapports de S√©curit√©</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Button variant="outline" className="h-20 flex flex-col">
                  <Download className="h-6 w-6 mb-2" />
                  <span>Rapport Complet PDF</span>
                </Button>
                <Button variant="outline" className="h-20 flex flex-col">
                  <Download className="h-6 w-6 mb-2" />
                  <span>Export CSV</span>
                </Button>
                <Button variant="outline" className="h-20 flex flex-col">
                  <Download className="h-6 w-6 mb-2" />
                  <span>Rapport OWASP</span>
                </Button>
                <Button variant="outline" className="h-20 flex flex-col">
                  <Download className="h-6 w-6 mb-2" />
                  <span>M√©triques de Tendance</span>
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}