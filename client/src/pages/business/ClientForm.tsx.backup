import { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
// import { supabase } // Migrated from Supabase to Express API
import { useToast } from '@/hooks/use-toast';
import { 
  ArrowLeft, 
  Save, 
  Building2,
  Mail,
  Phone,
  MapPin,
  Globe,
  FileText,
  Briefcase,
  AlertCircle
} from 'lucide-react';

interface ClientFormData {
  name: string;
  email: string;
  phone: string;
  address: string;
  website?: string;
  company_type?: string;
  tax_id?: string;
  registration_number?: string;
  industry?: string;
  notes?: string;
}

const INDUSTRIES = [
  'Technologies de l\'information',
  'Finance et Banque',
  'Santé',
  'Éducation',
  'Construction',
  'Commerce de détail',
  'Manufacture',
  'Services professionnels',
  'Télécommunications',
  'Immobilier',
  'Transport et Logistique',
  'Énergie',
  'Agriculture',
  'Tourisme et Hôtellerie',
  'Autre'
];

const COMPANY_TYPES = [
  { value: 'sarl', label: 'SARL' },
  { value: 'sa', label: 'SA' },
  { value: 'sasu', label: 'SASU' },
  { value: 'ei', label: 'Entreprise Individuelle' },
  { value: 'association', label: 'Association' },
  { value: 'gie', label: 'GIE' },
  { value: 'autre', label: 'Autre' }
];

export default function ClientForm() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const isEdit = id && id !== 'new';
  
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [form, setForm] = useState<ClientFormData>({
    name: '',
    email: '',
    phone: '',
    address: '',
    website: '',
    company_type: '',
    tax_id: '',
    registration_number: '',
    industry: '',
    notes: ''
  });
  
  const [errors, setErrors] = useState<Record<string, string>>({});
  const { toast } = useToast();

  useEffect(() => {
    if (isEdit) {
      loadClient();
    }
  }, [id]);

  const loadClient = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('companies')
        .select('*')
        .eq('id', id)
        .single();

      if (error) throw error;
      
      if (data) {
        setForm({
          name: data.name || '',
          email: data.email || '',
          phone: data.phone || '',
          address: data.address || '',
          website: data.website || '',
          company_type: data.company_type || '',
          tax_id: data.tax_id || '',
          registration_number: data.registration_number || '',
          industry: data.industry || '',
          notes: data.notes || ''
        });
      }
    } catch (error) {
      console.error('Error loading client:', error);
      toast({
        variant: "destructive",
        title: "Erreur",
        description: "Impossible de charger les données du client"
      });
    } finally {
      setLoading(false);
    }
  };

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};
    
    if (!form.name.trim()) {
      newErrors.name = 'Le nom de l\'entreprise est requis';
    }
    
    if (!form.email.trim()) {
      newErrors.email = 'L\'email est requis';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(form.email)) {
      newErrors.email = 'Email invalide';
    }
    
    if (!form.phone.trim()) {
      newErrors.phone = 'Le téléphone est requis';
    }
    
    if (!form.address.trim()) {
      newErrors.address = 'L\'adresse est requise';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    try {
      setSaving(true);
      
      const clientData = {
        name: form.name.trim(),
        email: form.email.trim(),
        phone: form.phone.trim(),
        address: form.address.trim(),
        website: form.website?.trim() || null,
        company_type: form.company_type || null,
        tax_id: form.tax_id?.trim() || null,
        registration_number: form.registration_number?.trim() || null,
        industry: form.industry || null,
        notes: form.notes?.trim() || null
      };
      
      if (isEdit) {
        const { error } = await supabase
          .from('companies')
          .update(clientData)
          .eq('id', id);
          
        if (error) throw error;
        
        toast({
          title: "Client modifié",
          description: "Les informations du client ont été mises à jour avec succès"
        });
      } else {
        const { data, error } = await supabase
          .from('companies')
          .insert([clientData])
          .select()
          .single();
          
        if (error) throw error;
        
        toast({
          title: "Client créé",
          description: "Le nouveau client a été ajouté avec succès"
        });
      }
      
      navigate('/business/clients');
    } catch (error: any) {
      console.error('Error saving client:', error);
      toast({
        variant: "destructive",
        title: "Erreur",
        description: error.message || "Impossible d'enregistrer le client"
      });
    } finally {
      setSaving(false);
    }
  };

  const handleInputChange = (field: keyof ClientFormData, value: string) => {
    setForm(prev => ({ ...prev, [field]: value }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Link to="/business/clients">
            <Button variant="outline" size="sm">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Retour
            </Button>
          </Link>
          <div>
            <h1 className="text-3xl font-bold">
              {isEdit ? 'Modifier le client' : 'Nouveau client'}
            </h1>
            <p className="text-muted-foreground">
              {isEdit ? 'Modifiez les informations du client' : 'Ajoutez un nouveau client à votre portefeuille'}
            </p>
          </div>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Informations de base */}
        <Card>
          <CardHeader>
            <CardTitle>Informations générales</CardTitle>
            <CardDescription>
              Informations de base sur l'entreprise cliente
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="name">
                  Nom de l'entreprise *
                  <Building2 className="h-4 w-4 inline ml-2 text-muted-foreground" />
                </Label>
                <Input
                  id="name"
                  value={form.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  placeholder="Arcadis Technologies"
                  className={errors.name ? 'border-red-500' : ''}
                />
                {errors.name && (
                  <p className="text-sm text-red-500 mt-1">{errors.name}</p>
                )}
              </div>
              
              <div>
                <Label htmlFor="email">
                  Email professionnel *
                  <Mail className="h-4 w-4 inline ml-2 text-muted-foreground" />
                </Label>
                <Input
                  id="email"
                  type="email"
                  value={form.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  placeholder="contact@entreprise.com"
                  className={errors.email ? 'border-red-500' : ''}
                />
                {errors.email && (
                  <p className="text-sm text-red-500 mt-1">{errors.email}</p>
                )}
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="phone">
                  Téléphone *
                  <Phone className="h-4 w-4 inline ml-2 text-muted-foreground" />
                </Label>
                <Input
                  id="phone"
                  value={form.phone}
                  onChange={(e) => handleInputChange('phone', e.target.value)}
                  placeholder="+221 33 123 45 67"
                  className={errors.phone ? 'border-red-500' : ''}
                />
                {errors.phone && (
                  <p className="text-sm text-red-500 mt-1">{errors.phone}</p>
                )}
              </div>
              
              <div>
                <Label htmlFor="website">
                  Site web
                  <Globe className="h-4 w-4 inline ml-2 text-muted-foreground" />
                </Label>
                <Input
                  id="website"
                  value={form.website}
                  onChange={(e) => handleInputChange('website', e.target.value)}
                  placeholder="https://www.entreprise.com"
                />
              </div>
            </div>
            
            <div>
              <Label htmlFor="address">
                Adresse *
                <MapPin className="h-4 w-4 inline ml-2 text-muted-foreground" />
              </Label>
              <Textarea
                id="address"
                value={form.address}
                onChange={(e) => handleInputChange('address', e.target.value)}
                placeholder="123 Avenue Bourguiba, Dakar, Sénégal"
                rows={3}
                className={errors.address ? 'border-red-500' : ''}
              />
              {errors.address && (
                <p className="text-sm text-red-500 mt-1">{errors.address}</p>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Informations juridiques et secteur */}
        <Card>
          <CardHeader>
            <CardTitle>Informations complémentaires</CardTitle>
            <CardDescription>
              Détails juridiques et secteur d'activité
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="company_type">
                  Type d'entreprise
                  <Briefcase className="h-4 w-4 inline ml-2 text-muted-foreground" />
                </Label>
                <Select
                  value={form.company_type}
                  onValueChange={(value) => handleInputChange('company_type', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Sélectionner un type" />
                  </SelectTrigger>
                  <SelectContent>
                    {COMPANY_TYPES.map((type) => (
                      <SelectItem key={type.value} value={type.value}>
                        {type.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label htmlFor="industry">
                  Secteur d'activité
                  <Briefcase className="h-4 w-4 inline ml-2 text-muted-foreground" />
                </Label>
                <Select
                  value={form.industry}
                  onValueChange={(value) => handleInputChange('industry', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Sélectionner un secteur" />
                  </SelectTrigger>
                  <SelectContent>
                    {INDUSTRIES.map((industry) => (
                      <SelectItem key={industry} value={industry}>
                        {industry}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="tax_id">
                  NINEA (Numéro d'identification fiscale)
                  <FileText className="h-4 w-4 inline ml-2 text-muted-foreground" />
                </Label>
                <Input
                  id="tax_id"
                  value={form.tax_id}
                  onChange={(e) => handleInputChange('tax_id', e.target.value)}
                  placeholder="123456789"
                />
              </div>
              
              <div>
                <Label htmlFor="registration_number">
                  RCCM (Registre de commerce)
                  <FileText className="h-4 w-4 inline ml-2 text-muted-foreground" />
                </Label>
                <Input
                  id="registration_number"
                  value={form.registration_number}
                  onChange={(e) => handleInputChange('registration_number', e.target.value)}
                  placeholder="SN-DKR-2024-A-12345"
                />
              </div>
            </div>
            
            <div>
              <Label htmlFor="notes">
                Notes internes
                <FileText className="h-4 w-4 inline ml-2 text-muted-foreground" />
              </Label>
              <Textarea
                id="notes"
                value={form.notes}
                onChange={(e) => handleInputChange('notes', e.target.value)}
                placeholder="Informations supplémentaires sur ce client..."
                rows={4}
              />
            </div>
          </CardContent>
        </Card>

        {/* Actions */}
        <div className="flex items-center justify-between">
          <Alert className="flex-1 mr-4">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              Les champs marqués d'un astérisque (*) sont obligatoires
            </AlertDescription>
          </Alert>
          
          <div className="flex gap-2">
            <Link to="/business/clients">
              <Button variant="outline" type="button">
                Annuler
              </Button>
            </Link>
            <Button type="submit" disabled={saving}>
              <Save className="h-4 w-4 mr-2" />
              {saving ? 'Enregistrement...' : (isEdit ? 'Mettre à jour' : 'Créer le client')}
            </Button>
          </div>
        </div>
      </form>
    </div>
  );
}