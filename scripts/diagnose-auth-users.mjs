#!/usr/bin/env node
import { createClient } from '@supabase/supabase-js';
import chalk from 'chalk';

const SUPABASE_URL = 'https://qlqgyrfqiflnqknbtycw.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFscWd5cmZxaWZsbnFrbmJ0eWN3Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDEwMjQ1MSwiZXhwIjoyMDY1Njc4NDUxfQ.hjJN_YGXtGETh6ks2mAJ0wmwYDcATrTJCihG1aV8ppc';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

console.log(chalk.blue('\nüîç Diagnostic des probl√®mes d\'authentification\n'));

async function diagnoseAuthUsers() {
  try {
    // 1. Lister tous les utilisateurs
    console.log(chalk.yellow('1. Analyse des utilisateurs dans auth.users...\n'));
    const { data: { users }, error } = await supabase.auth.admin.listUsers({
      page: 1,
      perPage: 1000 // R√©cup√©rer jusqu'√† 1000 utilisateurs
    });
    
    if (error) {
      console.error(chalk.red('Erreur:'), error);
      return;
    }

    console.log(chalk.cyan(`Total utilisateurs: ${users.length}\n`));

    // Analyser chaque utilisateur
    users.forEach((user, index) => {
      console.log(chalk.white(`\n${index + 1}. ${user.email}`));
      console.log(chalk.gray('‚îÄ'.repeat(50)));
      
      // Informations de base
      console.log(`   ID: ${chalk.gray(user.id)}`);
      console.log(`   Cr√©√© le: ${chalk.gray(new Date(user.created_at).toLocaleDateString())}`);
      
      // Statut de confirmation email
      if (user.email_confirmed_at) {
        console.log(`   Email confirm√©: ${chalk.green('‚úÖ OUI')} le ${new Date(user.email_confirmed_at).toLocaleDateString()}`);
      } else {
        console.log(`   Email confirm√©: ${chalk.red('‚ùå NON')}`);
      }
      
      // Derni√®re connexion
      if (user.last_sign_in_at) {
        console.log(`   Derni√®re connexion: ${chalk.green(new Date(user.last_sign_in_at).toLocaleDateString())}`);
      } else {
        console.log(`   Derni√®re connexion: ${chalk.yellow('JAMAIS')}`);
      }
      
      // M√©thode de connexion
      console.log(`   M√©thode d'inscription: ${chalk.cyan(user.identities?.[0]?.provider || 'unknown')}`);
      
      // M√©tadonn√©es
      console.log(`   R√¥le (app_metadata): ${chalk.magenta(user.app_metadata?.role || 'NON D√âFINI')}`);
      console.log(`   Actif (app_metadata): ${user.app_metadata?.is_active ? '‚úÖ' : '‚ùå'}`);
      
      // Probl√®mes potentiels
      const issues = [];
      
      if (!user.email_confirmed_at) {
        issues.push(chalk.red('‚ö†Ô∏è  Email non confirm√©'));
      }
      
      if (!user.identities || user.identities.length === 0) {
        issues.push(chalk.red('‚ö†Ô∏è  Aucune identit√© (pas de mot de passe?)'));
      }
      
      if (!user.app_metadata?.role) {
        issues.push(chalk.yellow('‚ö†Ô∏è  R√¥le non d√©fini'));
      }
      
      if (user.app_metadata?.is_active === false) {
        issues.push(chalk.red('‚ö†Ô∏è  Compte d√©sactiv√©'));
      }
      
      if (issues.length > 0) {
        console.log(chalk.red('\n   Probl√®mes d√©tect√©s:'));
        issues.forEach(issue => console.log(`   ${issue}`));
      } else {
        console.log(chalk.green('\n   ‚úÖ Compte semble OK'));
      }
    });

    // 2. R√©sum√© des probl√®mes
    console.log(chalk.blue('\n\nüìä R√©sum√© des probl√®mes:\n'));
    
    const unconfirmed = users.filter(u => !u.email_confirmed_at);
    const noIdentity = users.filter(u => !u.identities || u.identities.length === 0);
    const noRole = users.filter(u => !u.app_metadata?.role);
    const inactive = users.filter(u => u.app_metadata?.is_active === false);
    const neverLoggedIn = users.filter(u => !u.last_sign_in_at);
    
    console.log(`‚ùå Emails non confirm√©s: ${chalk.red(unconfirmed.length)} utilisateurs`);
    if (unconfirmed.length > 0) {
      unconfirmed.forEach(u => console.log(chalk.gray(`   - ${u.email}`)));
    }
    
    console.log(`\n‚ùå Sans identit√©/mot de passe: ${chalk.red(noIdentity.length)} utilisateurs`);
    if (noIdentity.length > 0) {
      noIdentity.forEach(u => console.log(chalk.gray(`   - ${u.email}`)));
    }
    
    console.log(`\n‚ö†Ô∏è  Sans r√¥le d√©fini: ${chalk.yellow(noRole.length)} utilisateurs`);
    if (noRole.length > 0) {
      noRole.forEach(u => console.log(chalk.gray(`   - ${u.email}`)));
    }
    
    console.log(`\n‚ùå Comptes d√©sactiv√©s: ${chalk.red(inactive.length)} utilisateurs`);
    if (inactive.length > 0) {
      inactive.forEach(u => console.log(chalk.gray(`   - ${u.email}`)));
    }
    
    console.log(`\n‚ö†Ô∏è  Jamais connect√©s: ${chalk.yellow(neverLoggedIn.length)} utilisateurs`);
    if (neverLoggedIn.length > 0) {
      neverLoggedIn.forEach(u => console.log(chalk.gray(`   - ${u.email}`)));
    }

    // 3. Solutions propos√©es
    console.log(chalk.blue('\n\nüí° Solutions propos√©es:\n'));
    
    if (unconfirmed.length > 0) {
      console.log(chalk.yellow('Pour les emails non confirm√©s:'));
      console.log('1. Confirmer manuellement les emails');
      console.log('2. Renvoyer les emails de confirmation');
      console.log('3. Cr√©er un script pour confirmer en masse\n');
    }
    
    if (noIdentity.length > 0) {
      console.log(chalk.yellow('Pour les utilisateurs sans mot de passe:'));
      console.log('1. Ces utilisateurs ont √©t√© cr√©√©s sans mot de passe');
      console.log('2. Ils doivent utiliser "Mot de passe oubli√©" pour d√©finir un mot de passe');
      console.log('3. Ou recr√©er les comptes avec un mot de passe\n');
    }

    // 4. Test de connexion
    console.log(chalk.blue('\n\nüîê Test de connexion avec les comptes confirm√©s:\n'));
    
    const confirmedUsers = users.filter(u => u.email_confirmed_at && u.identities?.length > 0);
    
    if (confirmedUsers.length > 0) {
      console.log(chalk.green('Utilisateurs qui DEVRAIENT pouvoir se connecter:'));
      confirmedUsers.forEach(u => {
        console.log(`\n‚úÖ ${chalk.cyan(u.email)}`);
        console.log(`   - Email confirm√©: ‚úì`);
        console.log(`   - Identit√© pr√©sente: ‚úì`);
        console.log(`   - R√¥le: ${u.app_metadata?.role || 'client (par d√©faut)'}`);
        
        if (!u.app_metadata?.role) {
          console.log(chalk.yellow('   ‚ö†Ô∏è  Attention: Pas de r√¥le d√©fini, utilisera "client" par d√©faut'));
        }
      });
    } else {
      console.log(chalk.red('‚ùå AUCUN utilisateur ne peut se connecter actuellement!'));
      console.log(chalk.yellow('\nRaison principale: Emails non confirm√©s ou pas de mot de passe d√©fini.'));
    }

  } catch (error) {
    console.error(chalk.red('Erreur:'), error);
  }
}

// Ex√©cuter le diagnostic
diagnoseAuthUsers();