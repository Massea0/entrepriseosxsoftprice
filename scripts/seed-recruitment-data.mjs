#!/usr/bin/env node
import { createClient } from '@supabase/supabase-js';
import chalk from 'chalk';

const SUPABASE_URL = 'https://qlqgyrfqiflnqknbtycw.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFscWd5cmZxaWZsbnFrbmJ0eWN3Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDEwMjQ1MSwiZXhwIjoyMDY1Njc4NDUxfQ.hjJN_YGXtGETh6ks2mAJ0wmwYDcATrTJCihG1aV8ppc';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

console.log(chalk.blue('üå± Seeding recruitment data...'));

// Sample job postings
const jobPostings = [
  {
    title: 'D√©veloppeur Full Stack Senior',
    department: 'tech',
    location: 'Paris, France (Remote)',
    type: 'full_time',
    experience_level: 'senior',
    status: 'published',
    published_at: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),
    closing_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
    salary_min: 65000,
    salary_max: 85000,
    description: `Nous recherchons un d√©veloppeur Full Stack Senior passionn√© pour rejoindre notre √©quipe technique. Vous serez responsable du d√©veloppement de nouvelles fonctionnalit√©s, de l'optimisation des performances et du mentorat des d√©veloppeurs juniors.`,
    responsibilities: [
      'D√©velopper et maintenir des applications web modernes avec React et Node.js',
      'Concevoir et impl√©menter des APIs RESTful robustes',
      'Collaborer avec l\'√©quipe produit pour d√©finir les sp√©cifications techniques',
      'Participer aux revues de code et assurer la qualit√© du code',
      'Mentorer les d√©veloppeurs juniors de l\'√©quipe'
    ],
    requirements: [
      'Minimum 5 ans d\'exp√©rience en d√©veloppement web',
      'Ma√Ætrise de React, TypeScript et Node.js',
      'Exp√©rience avec PostgreSQL et les bases NoSQL',
      'Connaissance des pratiques DevOps et CI/CD',
      'Excellent esprit d\'√©quipe et capacit√©s de communication'
    ],
    benefits: [
      'T√©l√©travail flexible (2-3 jours/semaine)',
      'Budget formation annuel de 3000‚Ç¨',
      'Mutuelle entreprise premium',
      'Tickets restaurant',
      '7 semaines de cong√©s (5 + 2 RTT)'
    ],
    skills: ['React', 'TypeScript', 'Node.js', 'PostgreSQL', 'Docker', 'AWS', 'Git']
  },
  {
    title: 'Product Designer UX/UI',
    department: 'tech',
    location: 'Lyon, France',
    type: 'full_time',
    experience_level: 'mid',
    status: 'published',
    published_at: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),
    closing_date: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000).toISOString(),
    salary_min: 45000,
    salary_max: 60000,
    description: `Rejoignez notre √©quipe design pour cr√©er des exp√©riences utilisateur exceptionnelles. Vous travaillerez en √©troite collaboration avec les d√©veloppeurs et le product owner.`,
    responsibilities: [
      'Concevoir des interfaces utilisateur intuitives et esth√©tiques',
      'Cr√©er des wireframes, prototypes et maquettes haute fid√©lit√©',
      'Conduire des tests utilisateurs et analyser les retours',
      'Maintenir et faire √©voluer le design system',
      'Collaborer avec les √©quipes de d√©veloppement'
    ],
    requirements: [
      '3+ ann√©es d\'exp√©rience en design UX/UI',
      'Ma√Ætrise de Figma et des outils de prototypage',
      'Portfolio d√©montrant des projets r√©ussis',
      'Connaissance des principes d\'accessibilit√©',
      'Capacit√© √† travailler en √©quipe agile'
    ],
    benefits: [
      'Environnement cr√©atif et stimulant',
      'Mat√©riel de pointe (MacBook Pro, √©cran 4K)',
      'Abonnement aux outils design',
      'Participation aux conf√©rences design',
      'Horaires flexibles'
    ],
    skills: ['Figma', 'Sketch', 'Adobe XD', 'Prototypage', 'User Research', 'Design System']
  },
  {
    title: 'Chef de Projet Digital',
    department: 'operations',
    location: 'Marseille, France',
    type: 'full_time',
    experience_level: 'mid',
    status: 'published',
    published_at: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
    salary_min: 50000,
    salary_max: 65000,
    description: `Nous recherchons un chef de projet digital exp√©riment√© pour piloter nos projets clients et coordonner les √©quipes pluridisciplinaires.`,
    responsibilities: [
      'Piloter des projets digitaux de A √† Z',
      'G√©rer la relation client et les attentes',
      'Coordonner les √©quipes techniques et cr√©atives',
      'Suivre les budgets et les d√©lais',
      'Assurer la qualit√© des livrables'
    ],
    requirements: [
      '3-5 ans d\'exp√©rience en gestion de projet digital',
      'Certification PMP ou Prince2 appr√©ci√©e',
      'Excellentes comp√©tences relationnelles',
      'Ma√Ætrise des m√©thodologies agiles',
      'Anglais professionnel'
    ],
    benefits: [
      'Prime sur objectifs',
      'V√©hicule de fonction',
      'Smartphone et laptop',
      'Formation continue',
      '√âvolution de carri√®re rapide'
    ],
    skills: ['Gestion de projet', 'Agile', 'Scrum', 'JIRA', 'Communication', 'Leadership']
  },
  {
    title: 'D√©veloppeur React Junior',
    department: 'tech',
    location: 'Remote',
    type: 'full_time',
    experience_level: 'junior',
    status: 'draft',
    salary_min: 35000,
    salary_max: 45000,
    description: `Opportunit√© parfaite pour un d√©veloppeur junior passionn√© par React et d√©sireux d'apprendre dans une √©quipe bienveillante.`,
    responsibilities: [
      'D√©velopper des composants React r√©utilisables',
      'Participer aux revues de code',
      '√âcrire des tests unitaires',
      'Documenter le code',
      'Apprendre et grandir avec l\'√©quipe'
    ],
    requirements: [
      '0-2 ans d\'exp√©rience avec React',
      'Connaissance de JavaScript ES6+',
      'Notions de Git',
      'Envie d\'apprendre',
      'Autonomie et curiosit√©'
    ],
    benefits: [
      'Mentorat par des seniors',
      'Budget formation important',
      'Remote first',
      '√âquipement fourni',
      'Ambiance startup'
    ],
    skills: ['React', 'JavaScript', 'HTML', 'CSS', 'Git']
  },
  {
    title: 'Data Analyst',
    department: 'tech',
    location: 'Toulouse, France',
    type: 'full_time',
    experience_level: 'mid',
    status: 'on_hold',
    salary_min: 48000,
    salary_max: 62000,
    description: `Nous cherchons un Data Analyst pour transformer nos donn√©es en insights actionnables et aider √† la prise de d√©cision strat√©gique.`,
    responsibilities: [
      'Analyser les donn√©es business et cr√©er des dashboards',
      'Identifier les tendances et opportunit√©s',
      'Cr√©er des rapports automatis√©s',
      'Collaborer avec les √©quipes m√©tiers',
      'Optimiser les processus data'
    ],
    requirements: [
      '3+ ans en analyse de donn√©es',
      'Ma√Ætrise de SQL et Python',
      'Exp√©rience avec Tableau ou Power BI',
      'Comp√©tences en statistiques',
      'Esprit analytique'
    ],
    benefits: [
      'T√©l√©travail partiel',
      'Formation data science',
      'Conf√©rences tech',
      'Prime annuelle',
      'RTT'
    ],
    skills: ['SQL', 'Python', 'Tableau', 'Power BI', 'Excel', 'Statistiques']
  }
];

// Sample candidates
const generateCandidates = (jobId, jobTitle, count) => {
  const firstNames = ['Sophie', 'Thomas', 'Marie', 'Lucas', 'Emma', 'Hugo', 'L√©a', 'Louis', 'Chlo√©', 'Alexandre'];
  const lastNames = ['Martin', 'Bernard', 'Dubois', 'Robert', 'Richard', 'Petit', 'Durand', 'Leroy', 'Moreau', 'Simon'];
  const statuses = ['new', 'screening', 'interview_1', 'interview_2', 'interview_3', 'offer', 'hired', 'rejected'];
  
  const candidates = [];
  for (let i = 0; i < count; i++) {
    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
    const status = statuses[Math.floor(Math.random() * statuses.length)];
    
    candidates.push({
      job_id: jobId,
      candidate_name: `${firstName} ${lastName}`,
      candidate_email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}${i}@email.com`,
      candidate_phone: `+33 6 ${Math.floor(Math.random() * 90000000 + 10000000)}`,
      status,
      application_date: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000).toISOString(),
      cv_url: `https://example.com/cv/${firstName.toLowerCase()}_${lastName.toLowerCase()}.pdf`,
      cover_letter: `Madame, Monsieur,\n\nJe suis vivement int√©ress√©(e) par le poste de ${jobTitle}...`,
      experience_years: Math.floor(Math.random() * 10) + 1,
      skills_match_score: Math.floor(Math.random() * 40) + 60,
      rating: status !== 'new' ? Math.floor(Math.random() * 3) + 3 : null,
      notes: status !== 'new' ? [`Candidat(e) prometteur(se)`, `Bonne exp√©rience technique`] : []
    });
  }
  return candidates;
};

async function seedData() {
  try {
    // First check if tables exist
    console.log(chalk.yellow('Checking tables...'));
    const { data: tables, error: tableError } = await supabase
      .from('job_postings')
      .select('id')
      .limit(1);
      
    if (tableError) {
      console.error(chalk.red('Table check error:'), tableError.message);
    }

    // Insert job postings
    console.log(chalk.yellow('Creating job postings...'));
    const { data: jobs, error: jobError } = await supabase
      .from('job_postings')
      .insert(jobPostings)
      .select();

    if (jobError) {
      console.error(chalk.red('Error creating job postings:'));
      console.error('Error details:', jobError);
      console.error('Error message:', jobError?.message);
      console.error('Error code:', jobError?.code);
      console.error('Error details:', jobError?.details);
      return;
    }

    console.log(chalk.green(`‚úì Created ${jobs.length} job postings`));

    // Generate and insert candidates for each job
    console.log(chalk.yellow('Creating job applications...'));
    let totalCandidates = 0;

    for (const job of jobs) {
      const candidateCount = job.status === 'published' 
        ? Math.floor(Math.random() * 20) + 10 
        : Math.floor(Math.random() * 5);
        
      const candidates = generateCandidates(job.id, job.title, candidateCount);
      
      const { error: appError } = await supabase
        .from('job_applications')
        .insert(candidates);

      if (appError) {
        console.error(chalk.red(`Error creating applications for ${job.title}:`), appError);
        continue;
      }

      totalCandidates += candidates.length;
      console.log(chalk.gray(`  - ${candidates.length} applications for "${job.title}"`));
    }

    console.log(chalk.green(`‚úì Created ${totalCandidates} job applications`));

    // Create some interviews for candidates in interview stages
    console.log(chalk.yellow('Creating interviews...'));
    const { data: applications } = await supabase
      .from('job_applications')
      .select('id, status, job_id')
      .in('status', ['interview_1', 'interview_2', 'interview_3']);

    let interviewCount = 0;
    for (const app of applications || []) {
      const interviewType = app.status === 'interview_1' ? 'phone' : 
                          app.status === 'interview_2' ? 'technical' : 'final';
      
      const interview = {
        application_id: app.id,
        interview_type: interviewType,
        scheduled_date: new Date(Date.now() + Math.floor(Math.random() * 7 + 1) * 24 * 60 * 60 * 1000).toISOString(),
        duration_minutes: interviewType === 'phone' ? 30 : 60,
        location: interviewType === 'phone' ? 'Phone' : 'Office/Video',
        interviewer_ids: ['00000000-0000-0000-0000-000000000001'], // Mock interviewer
        status: 'scheduled'
      };

      const { error } = await supabase
        .from('recruitment_interviews')
        .insert(interview);

      if (!error) interviewCount++;
    }

    console.log(chalk.green(`‚úì Created ${interviewCount} interviews`));
    console.log(chalk.blue('\n‚ú® Recruitment data seeding completed!'));

  } catch (error) {
    console.error(chalk.red('Unexpected error:'), error);
  }
}

// Run the seeding
seedData();